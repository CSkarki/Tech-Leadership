# EmpathIQ Knowledge Platform (Frontend)

## Overview

EmpathIQ Knowledge Platform is a React-based web application designed to provide a centralized, AI-powered knowledge repository for individuals and enterprises. It features secure Microsoft login, role-based access, and seamless integration with a Flask backend via Apache HTTPD with SSL.

## Architecture Flow

```
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│                 │     │                 │     │                 │
│  React Frontend │────▶│  Apache HTTPD   │────▶│  Flask Backend  │
│                 │     │                 │     │                 │
└─────────────────┘     └─────────────────┘     └─────────────────┘
        │                       │                       │
        │                       │                       │
        ▼                       ▼                       ▼
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│                 │     │                 │     │                 │
│  User Browser   │◀────│  HTTPS (443)    │◀────│  API Endpoints  │
│                 │     │                 │     │                 │
└─────────────────┘     └─────────────────┘     └─────────────────┘
```

### Flow Description

1. **User Browser**: Users access the application via HTTPS (port 443).
2. **React Frontend**: Serves the UI and handles client-side logic.
3. **Apache HTTPD**: Acts as a reverse proxy, handling SSL termination and routing API requests to the Flask backend.
4. **Flask Backend**: Processes API requests and returns data to the frontend.

## Directory Structure

- `src/` – Main React source code
  - `components/` – Reusable UI components (Sidebar, Login, MainContent, etc.)
  - `App.js` – Main app entry, sets up routing and layout
  - `AppbtocMain.js`, `AppBtoBMain.js`, etc. – Feature modules for B2C and B2B flows
- `public/` – Static assets
- `ssl/` – SSL certificates/keys for HTTPS
- `Dockerfile` – Multi-stage build: React build + Apache config
- `httpd.conf` – Custom Apache configuration (SSL, proxy rules)
- `docker-compose.yml` – Service orchestration

## Key Features

### Authentication

- Microsoft Azure AD login via MSAL
- Role/group-based access (corporate vs. individual)
- Session management with access tokens

### Main Functionalities

- **Sidebar Navigation:** Contextual navigation, login/logout, user info display
- **MainContent:** Landing page with platform value proposition
- **B2B/B2C Modules:** Separate flows for corporate and individual users
- **Knowledge Upload/Query:** Upload files, ask questions, process handwritten notes (routes: `/upload`, `/ask`, etc.)

### API Integration

- All API calls are proxied to the Flask backend via Apache (see `httpd.conf` for proxy rules).

## Deployment

### Docker

- **Build:** Multi-stage Dockerfile builds React app, then serves via Apache HTTPD with SSL.
- **SSL:** Certificates are copied into the container for HTTPS.
- **Ports:** Exposes 443 (HTTPS).
- **Apache:** Configured to proxy API requests to the backend.

### Docker Compose

- Defines the `react-frontend` service.
- Connects to a custom bridge network for backend communication.
- Maps port 443 for HTTPS access.

## Configuration

### Apache (`httpd.conf`)

- SSL enabled with provided cert/key.
- Proxies API endpoints (`/upload`, `/ask`, etc.) to Flask backend.
- Restricts directory access, sets up logging, and configures security headers (commented).

### React (`package.json`)

- Uses MUI for UI, Redux for state, MSAL for authentication, Axios for API calls.
- Scripts: `start`, `build`, `test`, `eject`.

## Usage

### Local Development

```sh
npm install
npm start
```

### Production (Docker)

```sh
docker-compose up --build
```

## Security

- All traffic is served over HTTPS.
- User authentication and group membership are managed via Azure AD.
- Backend API is not directly exposed; all requests are proxied through Apache.

## Extensibility

- Modular React components for easy feature addition.
- Easily extendable Apache config for new API routes.
- Supports both individual and corporate user flows.

## Contact

For issues or contributions, contact: swiftdeploy@outlook.com 
